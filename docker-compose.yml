version: '3'

services:
  doc-converter:
    build: .
    ports:
      - "5001:5000"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    volumes:
      # Using a named volume for application code instead of bind mounts
      # This is more compatible with Portainer deployments
      - app_code:/app
      - temp_files:/tmp
    environment:
      - PORT=${PORT:-5000}
      - MAX_CONTENT_LENGTH=${MAX_CONTENT_LENGTH:-16777216}  # 16MB in bytes
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/0}
      - API_KEY=${API_KEY:-default_dev_key}
    depends_on:
      - redis

  redis:
    image: redis:alpine
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    volumes:
      - redis_data:/data
    # Not exposing Redis externally for better security
    # Redis is only accessible from within the Docker network
    command: redis-server --maxmemory 384mb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10 --save 60 10000

  celery-worker:
    build: .
    command: celery -A app.celery worker --loglevel=info --max-tasks-per-child=10 --pool=prefork --concurrency=2
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "python simple_health_check.py celery-worker"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      # Using a named volume for application code instead of bind mounts
      # This is more compatible with Portainer deployments
      - app_code:/app
      - temp_files:/tmp
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/0}
      - API_KEY=${API_KEY:-default_dev_key}
    depends_on:
      - redis
      
  celery-beat:
    build: .
    command: celery -A app.celery beat --loglevel=info
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD-SHELL", "python simple_health_check.py celery-beat"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 90s
    volumes:
      # Using a named volume for application code instead of bind mounts
      # This is more compatible with Portainer deployments
      - app_code:/app
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/0}
      - API_KEY=${API_KEY:-default_dev_key}
    depends_on:
      - redis
      - celery-worker

volumes:
  app_code:
    # This volume will contain your application code
  temp_files:
    # Temporary files storage with size limit
  redis_data:
    # Redis persistence data